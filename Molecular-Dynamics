import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt

# Define the Henderson-Hasselbalch equation
def henderson_hasselbalch(pH, pKa):
    return 1 / (1 + 10**(pH - pKa))
#hill equation
def hill_equation(pH, pKa, n):
    return 1 / (1 + 10**(n * (pH - pKa)))

# Provided titration data (observed protonated fractions with pH values)
pH_values = np.array([3.6, 3.7, 3.8, 4.1, 4.4, 4.5, 5.5])
protonated_fraction = np.array([0.80, 0.70, 0.60, 0.50, 0.30, 0.20, 0.00])

# Fit the data to the Henderson-Hasselbalch equation using nonlinear regression to determine the pKa value
initial_guess = [4.0]  # Initial guess for pKa
params, covariance = curve_fit(henderson_hasselbalch, pH_values, protonated_fraction, absolute_sigma=True, p0=initial_guess)
pKa_fit = params[0]
pKa_error = np.sqrt(np.diag(covariance))[0]

#monte carlo simulations to analyze noise and variability
n_simulations = 1000 # number of simulations
pKa_values = [] #store the fitted pka values from each simulation
hill_params = [] #store hil equation parameters

#Add noise to the data to perform fitting
np.random.seed(42) #for reproducibility
for _ in range(n_simulations):
    #add random noise to the observed data
    noisy_data = protonated_fraction + np.random.normal(0, 0.5, size=protonated_fraction.shape) #adjust noise level

    #fit the noisy data to Henderson-Hasselbalch equation
    try:
        params_noisy, _ = curve_fit(henderson_hasselbalch, pH_values, noisy_data, p0=initial_guess)
        pKa_values.append(params_noisy[0])

        # Fit to the Hill equation
        params_hill, _ = curve_fit(hill_equation, pH_values, noisy_data, p0=[4.0, 1.0])
        hill_params.append(params_hill)
    except:
        pass  # Ignore fitting errors for extreme noise cases

#calculate the mean and sd of pKa values from the simulation
pKa_mean = np.mean(pKa_values)
pKa_std = np.std(pKa_values)

hill_params = np.array(hill_params)
hill_pKa_mean = np.mean(hill_params[:, 0])
hill_pKa_std = np.std(hill_params[:, 0])
hill_n_mean = np.mean(hill_params[:, 1])
hill_n_std = np.std(hill_params[:, 1])


# Calculate the fitted curve for visualization
pH_smooth = np.linspace(3.5, 5.5, 500)
henderson_curve = henderson_hasselbalch(pH_smooth, pKa_fit)
hill_curve = hill_equation(pH_smooth, hill_pKa_mean, hill_n_mean)

# Plot the data and the fitted curves
plt.figure(figsize=(6, 5))
plt.errorbar(pH_values, protonated_fraction, fmt='o', color='blue', label='Observed Data')
plt.plot(pH_smooth, henderson_curve, color='green', label=f'Henderson-Hasselbalch\n$pK_a = {pKa_fit:.2f} \pm {pKa_error:.2f}$')
plt.plot(pH_smooth, hill_curve, color='red', linestyle='--', label=f'Hill Equation\n$pK_a = {hill_pKa_mean:.2f} \pm {hill_pKa_std:.2f}$\n$n = {hill_n_mean:.2f} \pm {hill_n_std:.2f}$')
# Add labels and legend
plt.xlabel('pH', fontsize=12)
plt.ylabel('Protonated Fraction, f', fontsize=12)
plt.ylim(0, 1)
plt.xlim(3.5, 5.5)
plt.legend(fontsize=10)
plt.grid()
plt.tight_layout()
plt.show()

# Print the fitted parameters with errors
print(f"Henderson-Hasselbalch Fitted pKa: {pKa_fit:.2f} ± {pKa_error:.2f}")
print(f"Monte Carlo Mean pKa: {pKa_mean:.2f} ± {pKa_std:.2f}")
print(f"Hill Equation Fitted pKa: {hill_pKa_mean:.2f} ± {hill_pKa_std:.2f}")
print(f"Hill Equation Hill Coefficient (n): {hill_n_mean:.2f} ± {hill_n_std:.2f}")

